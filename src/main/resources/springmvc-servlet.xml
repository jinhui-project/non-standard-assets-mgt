<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:c="http://www.springframework.org/schema/c"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
		http://www.springframework.org/schema/tx 
           http://www.springframework.org/schema/tx/spring-tx-2.5.xsd 
           http://www.springframework.org/schema/aop 
           http://www.springframework.org/schema/aop/spring-aop-2.5.xsd"
	default-autowire="default">

	<context:property-placeholder location="classpath:properties/app.properties, classpath:properties/app-${deploy.env}.properties"
								  ignore-resource-not-found="true" ignore-unresolvable="true" />

	<mvc:default-servlet-handler />
	<context:annotation-config />
	<context:component-scan base-package="com.jinhui.*" />


	<!-- swagger config START -->

	<mvc:cors>
		<mvc:mapping path="/**"
					 allowed-methods="GET, POST, OPTIONS"/>
	</mvc:cors>

	<mvc:resources mapping="/dist/*.html" location="/dist/"/>
	<mvc:resources mapping="/dist/**" location="/dist/"/>
	<mvc:resources mapping="/**/*.json" location="/dist/"/>

	<bean name="springfox" class="com.jinhui.controller.config.SwaggerConfig"/>
	<!-- swagger config END -->

<!-- 	<mvc:annotation-driven /> -->
	
	<mvc:annotation-driven>
		<mvc:message-converters>
			<bean class="org.springframework.http.converter.StringHttpMessageConverter" />
			<bean
				class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter" />
		</mvc:message-converters>
	</mvc:annotation-driven>
	
	<bean id="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
	</bean>

	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<bean id="sqlSessionFactory" name="sqlSessionFactory"
		class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource">
			<ref bean="dataSource" />
		</property>
		<property name="mapperLocations">
			<list>
				<value>classpath:com/jinhui/mapper/**/**/*Mapper.xml</value>
			</list>
		</property>
		<property name="configLocation">
			<value>classpath:mybatis-config.xml</value>
		</property>
		<property name="databaseIdProvider">
			<bean class="org.apache.ibatis.mapping.VendorDatabaseIdProvider" />
		</property>
	</bean>

	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory" />
	</bean>
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.jinhui.mapper" />
		<property name="sqlSessionTemplateBeanName" value="sqlSessionTemplate" />
	</bean>
	



	<tx:advice id="txAdvice" transaction-manager="txManager">
		<!-- the transactional semantics... -->
		<tx:attributes>
			<!-- all methods starting with 'get' are read-only -->
			<tx:method name="get*" read-only="true" />
			<!-- other methods use the default transaction settings (see below) -->
			<tx:method name="*" rollback-for="java.lang.Exception" />
		</tx:attributes>
	</tx:advice>

	<aop:config>
		<aop:pointcut id="fooServiceOperation"
			expression="execution(* com.jinhui.service.*.*.*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="fooServiceOperation" />
	</aop:config>


	<bean id="txManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>


	<!--<mvc:resources mapping="/resources/**" location="/WEB-INF/resources/" />-->
	<!-- jsp视图解析器 -->
	<bean id="jspViewResolver"
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="viewClass"
			value="org.springframework.web.servlet.view.JstlView" />
		<property name="prefix" value="/WEB-INF/jsp/" />
		<property name="suffix" value=".jsp" />
		<property name="order" value="2" />
	</bean>
	
	<!-- SpringMVC上传文件时，需要配置MultipartResolver处理器 -->
     <bean id="multipartResolver"  class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
         <property name="defaultEncoding" value="UTF-8" />
    <!-- 指定所上传文件的总大小,单位字节。注意maxUploadSize属性的限制不是针对单个文件，而是所有文件的容量之和 -->
         <property name="maxUploadSize" value="10240000" />
     </bean>
     
      <!-- 拦截器 -->  
        <mvc:interceptors>  
            <!-- 多个拦截器，顺序执行 -->  
            <mvc:interceptor>
                <mvc:mapping path="/**"/>  
		        <!--拦截的url -->
		            <mvc:mapping path="/admin/**"/>
				<!-- 不拦截的url start -->
		            <mvc:exclude-mapping path="/admin/login"/> 
		            <mvc:exclude-mapping path="/admin/code"/>
					<mvc:exclude-mapping path="/admin/msgErrorInfo"/>
				    <!-- 遗留产物不知道有没有用 -->
				  	<mvc:exclude-mapping path="/admin/publicUploadInfo"/>
				  	<mvc:exclude-mapping path="/admin/download"/>
				  	<mvc:exclude-mapping path="/admin/queryFileinfosInfo"/>
				  	<mvc:exclude-mapping path="/admin/queryByIdScore"/>
				<!--不拦截的url end -->
                <bean class="com.jinhui.controller.authorizing.RequestInterceptor">
					<property name="unauthenticatedUrl" value="/admin/msgErrorInfo" />
				</bean>
            </mvc:interceptor>

             <!-- 记录操作日志拦截器 -->
            <mvc:interceptor>  
                <mvc:mapping path="/**"/>  
                <bean class="com.jinhui.interceptor.OperateLogInterceptor"></bean>  
            </mvc:interceptor>
        </mvc:interceptors>


	<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<property name="maxIdle" value="${redis.pool.maxIdle}" />
		<property name="timeBetweenEvictionRunsMillis" value="${redis.pool.timeBetweenEvictionRunsMillis}" />
		<property name="minEvictableIdleTimeMillis" value="${redis.pool.minEvictableIdleTimeMillis}" />
		<property name="testOnBorrow" value="${redis.pool.testOnBorrow}" />
		<property name="maxTotal" value="${redis.pool.maxTotal}" />
		<property name="testWhileIdle" value="${redis.pool.testWhileIdle}" />
	</bean>
	<bean id="redisSentinelConfig" class="org.springframework.data.redis.connection.RedisSentinelConfiguration">
		<constructor-arg name="propertySource" >
			<bean class="org.springframework.core.env.MapPropertySource">
				<constructor-arg name="name" value="sentinelConfig" />
				<constructor-arg name="source">
					<map>
						<entry key="spring.redis.sentinel.master" value="${redis.master.name}" />
						<entry key="spring.redis.sentinel.nodes" value="${redis.sentinel.nodes}" />
					</map>
				</constructor-arg>
			</bean>
		</constructor-arg>
	</bean>
	<bean id="jedisConnectionFactory"
		  class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
		<constructor-arg name="sentinelConfig" ref="redisSentinelConfig" />
		<constructor-arg name="poolConfig" ref="jedisPoolConfig" />
		<property name="password" value="${redis.password}" />
	</bean>

	<bean id="redisStringTemplate" class="org.springframework.data.redis.core.StringRedisTemplate"
		p:connection-factory-ref="jedisConnectionFactory" />

	<bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate"
		p:connection-factory-ref="jedisConnectionFactory">
		<property name="KeySerializer">
			<bean
				class="org.springframework.data.redis.serializer.StringRedisSerializer"></bean>
		</property>

	</bean>


	<bean id="springContextHolder" class="com.jinhui.util.SpringContextHolder"
		lazy-init="false" />

	<!-- shiro start -->

	<bean id="securityManager" class="org.apache.shiro.mgt.DefaultSecurityManager">
		<property name="realm" ref="authorizingRealm" />
		<property name="sessionManager">
			<bean class="com.jinhui.service.authorizing.shiro.RedisSessionManager" >
				<property name="globalSessionTimeout" value="${session.timeout}" />
				<property name="enabledSharedSessionData" value="false" />
			</bean>
		</property>
	</bean>
	<bean id="realmCache" class="com.jinhui.service.authorizing.shiro.cache.RedisShiroCache" >
		<property name="authorizingService" ref="authorizingService" />
		<property name="enabledRedisCache" value="false" />
	</bean>
	<bean id="authorizingRealm" class="com.jinhui.service.authorizing.shiro.DefaultAuthorizingRealm">
		<property name="authorizationCachingEnabled" value="true"/>
		<property name="authorizationCache" ref="realmCache" />
	</bean>
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

	<bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
		<property name="staticMethod" value="org.apache.shiro.SecurityUtils.setSecurityManager"/>
		<property name="arguments" ref="securityManager"/>
	</bean>

	<bean id="authorizingService" class="com.jinhui.service.authorizing.AuthorizingService" />

	<bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
		<property name="staticMethod"
				  value="com.jinhui.service.authorizing.shiro.PermissionUtils.setAuthorizingService"/>
		<property name="arguments" ref="authorizingService"/>
	</bean>

	<bean id="securityCodeService" class="com.jinhui.service.authorizing.RedisSecurityCodeService">
		<constructor-arg name="enabledRedisCache" value="false" />
	</bean>
	<!-- shiro end -->
</beans>